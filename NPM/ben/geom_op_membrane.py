import os
import sys
import builtins
import numpy as np
import ase, ase.build
from ase.visualize import view
from ase import Atoms
from ase.optimize import LBFGS
import quippy, quippy.descriptors
from quippy.potential import Potential

# SET UP UNIT CELL
a = 5.431
npm = Atoms(symbols=(['Si'] * 96),
                    cell=np.diag((4*a, a, 5*a)),
                    pbc=[1, 1, 0],
                    scaled_positions=[
                    (0.0000,    0.00,    0.199999),
                    (0.0000,    0.50,    0.299999),
                    (0.0625,    0.25,    0.249999),
                    (0.1250,    0.00,    0.299999),
                    (0.0625,    0.75,    0.349999),
                    (0.1875,    0.25,    0.349999),
                    (0.1875,    0.75,    0.249999),
                    (0.1250,    0.50,    0.199999),
                    (0.2500,    0.00,    0.199999),
                    (0.2500,    0.50,    0.299999),
                    (0.3125,    0.25,    0.249999),
                    (0.3750,    0.00,    0.299999),
                    (0.3125,    0.75,    0.349999),
                    (0.4375,    0.25,    0.349999),
                    (0.4375,    0.75,    0.249999),
                    (0.3750,    0.50,    0.199999),
                    (0.5000,    0.00,    0.199999),
                    (0.5000,    0.50,    0.299999),
                    (0.5625,    0.25,    0.249999),
                    (0.6250,    0.00,    0.299999),
                    (0.5625,    0.75,    0.349999),
                    (0.6875,    0.25,    0.349999),
                    (0.6875,    0.75,    0.249999),
                    (0.6250,    0.50,    0.199999),
                    (0.7500,    0.00,    0.199999),
                    (0.7500,    0.50,    0.299999),
                    (0.8124,    0.25,    0.249999),
                    (0.8750,    0.00,    0.299999),
                    (0.8125,    0.75,    0.349999),
                    (0.9375,    0.25,    0.349999),
                    (0.9375,    0.75,    0.249999),
                    (0.8750,    0.50,    0.199999),
                    (0.0000,    0.00,    0.399999),
                    (0.0000,    0.50,    0.500000),
                    (0.0625,    0.25,    0.449999),
                    (0.1250,    0.00,    0.500000),
                    (0.0625,    0.75,    0.550000),
                    (0.1875,    0.25,    0.550000),
                    (0.1875,    0.75,    0.449999),
                    (0.1250,    0.50,    0.399999),
                    (0.2500,    0.00,    0.399999),
                    (0.2500,    0.50,    0.500000),
                    (0.3125,    0.25,    0.449999),
                    (0.3750,    0.00,    0.500000),
                    (0.3125,    0.75,    0.550000),
                    (0.4375,    0.25,    0.550000),
                    (0.4375,    0.75,    0.449999),
                    (0.3750,    0.50,    0.399999),
                    (0.5000,    0.00,    0.399999),
                    (0.5000,    0.50,    0.500000),
                    (0.5625,    0.25,    0.449999),
                    (0.6250,    0.00,    0.500000),
                    (0.5625,    0.75,    0.550000),
                    (0.6875,    0.25,    0.550000),
                    (0.6875,    0.75,    0.449999),
                    (0.6250,    0.50,    0.399999),
                    (0.7500,    0.00,    0.399999),
                    (0.7500,    0.50,    0.500000),
                    (0.8125,    0.25,    0.449999),
                    (0.8750,    0.00,    0.500000),
                    (0.8125,    0.75,    0.550000),
                    (0.9375,    0.25,    0.550000),
                    (0.9375,    0.75,    0.449999),
                    (0.8750,    0.50,    0.399999),
                    (0.0000,    0.00,    0.600000),
                    (0.0000,    0.50,    0.700000),
                    (0.0625,    0.25,    0.650000),
                    (0.1250,    0.00,    0.700000),
                    (0.0625,    0.75,    0.750000),
                    (0.1875,    0.25,    0.750000),
                    (0.1875,    0.75,    0.650000),
                    (0.1250,    0.50,    0.600000),
                    (0.2500,    0.00,    0.600000),
                    (0.2500,    0.50,    0.700000),
                    (0.3125,    0.25,    0.650000),
                    (0.3750,    0.00,    0.700000),
                    (0.3125,    0.75,    0.750000),
                    (0.4375,    0.25,    0.750000),
                    (0.4375,    0.75,    0.650000),
                    (0.3750,    0.50,    0.600000),
                    (0.5000,    0.00,    0.600000),
                    (0.5000,    0.50,    0.700000),
                    (0.5625,    0.25,    0.650000),
                    (0.6250,    0.00,    0.700000),
                    (0.5625,    0.75,    0.750000),
                    (0.6875,    0.25,    0.750000),
                    (0.6875,    0.75,    0.650000),
                    (0.6250,    0.50,    0.600000),
                    (0.7500,    0.00,    0.600000),
                    (0.7500,    0.50,    0.700000),
                    (0.8125,    0.25,    0.650000),
                    (0.8750,    0.00,    0.700000),
                    (0.8125,    0.75,    0.750000),
                    (0.9375,    0.25,    0.750000),
                    (0.9375,    0.75,    0.650000),
                    (0.8750,    0.50,    0.600000)])


# SET UP CALCULATOR
# Gaussian Approximation Potentials (GAP)
orig_dir = os.getcwd()
model_dir = os.path.dirname(sys.argv[0])
if model_dir != '':
    os.chdir(model_dir)

if os.path.exists('gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2'):
    os.system('bunzip2 gp_iter6_sparse9k.xml.sparseX.GAP_2017_6_17_60_4_3_56_1651.bz2')

try:
    calc = Potential(init_args='Potential xml_label="GAP_2017_6_17_60_4_3_56_165"',
                                               param_filename='gp_iter6_sparse9k.xml')
    Potential.__str__ = lambda self: '<GAP Potential>'
finally:
    os.chdir(orig_dir)


no_checkpoint = True

npm.set_calculator(calc)

dyn = LBFGS(atoms=npm, trajectory='membrane.traj', restart='membrane.pckl')
dyn.run(fmax=0.05)
view(npm)

print(npm.get_scaled_positions())
